<?php

namespace App\Containers\AppSection\Authentication\Actions;

use App\Containers\AppSection\Authentication\Exceptions\UserNotConfirmedException;
use App\Containers\AppSection\Authentication\Tasks\CallOAuthServerTask;
use App\Containers\AppSection\Authentication\Tasks\CheckIfUserEmailIsConfirmedTask;
use App\Containers\AppSection\Authentication\Tasks\ExtractLoginCustomAttributeTask;
use App\Containers\AppSection\Authentication\Tasks\MakeRefreshCookieTask;
//use App\Containers\AppSection\Authentication\UI\API\Requests\ProxyLoginPasswordGrantRequest;
use App\Containers\AppSection\Authentication\UI\API\Requests\TenantsLoginRequest;
use App\Containers\AppSection\User\Models\User;
use App\Containers\Tenantusers\Models\Tenantusers;
use App\Containers\AppSection\Tenant\Models\Tenant;
use App\Ship\Parents\Actions\Action;
use Illuminate\Support\Facades\DB;
use Lcobucci\JWT\Parser;
use Illuminate\Support\Facades\Hash;
use Config;
use App\Containers\AppSection\Authentication\Exceptions\LoginFailedException;

class ProxyLoginForTenantWebClientAction extends Action
{
    public function run(TenantsLoginRequest $request): array
    {
        $sanitizedData = $request->sanitizeInput(
            array_merge(
                array_keys(config('appSection-authentication.login.attributes')),
                ['password']
            )
        );

        if($sanitizedData['alternate_id']!=""){
          $userData = Tenantusers::where('alternate_id',$sanitizedData['alternate_id'])->where('is_active','Active')->first();
          if(!empty($userData)){
            $email = $userData->email;
            $password = $userData->user_has_key;

          }else{
            $user_error_Data = Tenantusers::where('alternate_id',$sanitizedData['alternate_id'])->where('is_active','Inactive')->first();
            if(!empty($user_error_Data)){
              $tenant_Data = Tenant::where('id',$user_error_Data->tenant_id)->first();
              $tenant_name = $tenant_Data->first_name." ".$tenant_Data->middle_name." ".$tenant_Data->last_name;
              throw new LoginFailedException("Your account is disabled, please contact ".$tenant_name, '400');
            }
            throw new LoginFailedException("User not found...", '400');
          }
        }

        if($sanitizedData['usingqr']=="yes"){
          $sanitizedData['email']=$email;
          $sanitizedData['password']=$password;
        }else{
          $sanitizedData['email']=$email;
        }
        config(['auth.guards.api.provider' => 'tenant']);


        $loginCustomAttribute = app(ExtractLoginCustomAttributeTask::class)->run($sanitizedData);

        $sanitizedData['username'] = $loginCustomAttribute['username'];
        $sanitizedData['client_id'] = config('appSection-authentication.clients.api.id');
        $sanitizedData['client_secret'] = config('appSection-authentication.clients.api.secret');
        $sanitizedData['grant_type'] = 'password';
        //$sanitizedData['clientEntity'] = config('auth.guards.api.provider');
        //$sanitizedData['client_entity'] = 'tenant';
        $sanitizedData['scope'] = '';
        //echo Hash::make($request->password)."\n<br>";
        //print_r($sanitizedData);die;
        $responseContent = app(CallOAuthServerTask::class)->run($sanitizedData, $request->headers->get('accept-language'));
        $this->processEmailConfirmationIfNeeded($responseContent);
        $refreshCookie = app(MakeRefreshCookieTask::class)->run($responseContent['refresh_token']);

        $responseContent['role_id'] = (string)$userData->role_id;
        return [
            'response_content' => $responseContent,
            'refresh_cookie' => $refreshCookie,
        ];
    }

    private function processEmailConfirmationIfNeeded($response): void
    {
        $user = $this->extractUserFromAuthServerResponse($response);
        //$isUserConfirmed = app(CheckIfUserEmailIsConfirmedTask::class)->run($user);
        //if (!$isUserConfirmed) {
        //    throw new UserNotConfirmedException();
        //}
    }

    private function extractUserFromAuthServerResponse($response)
    {
        $tokenId = app(Parser::class)->parse($response['access_token'])->claims()->get('jti');
        $userAccessRecord = DB::table('oauth_access_tokens')->find($tokenId);
        return Tenantusers::find($userAccessRecord->user_id);
    }
}
